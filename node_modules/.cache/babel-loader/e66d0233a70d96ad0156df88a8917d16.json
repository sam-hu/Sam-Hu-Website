{"ast":null,"code":"import _slicedToArray from \"/Users/samhu/Repos/RyanSlama.com-V4/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/samhu/Repos/RyanSlama.com-V4/src/Taskbar.tsx\";\nimport React, { useState, useEffect } from 'react';\n\nfunction SysTray(props) {\n  let _useState = useState(new Date().toLocaleString(\"en-US\", {\n    hour: \"2-digit\",\n    minute: \"2-digit\"\n  })),\n      _useState2 = _slicedToArray(_useState, 2),\n      time = _useState2[0],\n      setTime = _useState2[1];\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTime(new Date().toLocaleString(\"en-US\", {\n        hour: \"2-digit\",\n        minute: \"2-digit\"\n      }));\n    }, 1000);\n    return () => clearInterval(interval);\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tray\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"trayIcon\",\n    src: \"/icons/speaker.png\",\n    alt: \"Mini Player\",\n    onClick: () => props.toggleWinamp(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"img\", {\n    className: \"trayIcon\",\n    src: \"/icons/update.png\",\n    alt: \"System Update\",\n    onClick: () => props.f()({\n      type: \"launch\",\n      title: \"Critical Update Notification\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"clock\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, \" \", time, \" \"));\n}\n\nexport function TaskBar(props) {\n  let _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      showWinamp = _useState4[0],\n      setWinamp = _useState4[1];\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"TaskBar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"start button \" + (props.startActive ? \"active\" : \"inactive\"),\n    onClick: () => props.toggleStart(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, \"\\u2756 Start\"), props.children, /*#__PURE__*/React.createElement(\"div\", {\n    className: !showWinamp ? \"winamp\" : \"winampVisible\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"iframe\", {\n    title: \"Mini Player\",\n    className: \"browser\",\n    src: \"https://open.spotify.com/embed/user/theslama/playlist/2xXLjFAhpmc7rSW5h2bzup\",\n    allow: \"encrypted-media\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(SysTray, {\n    toggleWinamp: () => setWinamp(!showWinamp),\n    f: props.f,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/samhu/Repos/RyanSlama.com-V4/src/Taskbar.tsx"],"names":["React","useState","useEffect","SysTray","props","Date","toLocaleString","hour","minute","time","setTime","interval","setInterval","clearInterval","toggleWinamp","f","type","title","TaskBar","showWinamp","setWinamp","startActive","toggleStart","children"],"mappings":";;AAAA,OAAOA,KAAP,IAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAmE;AAAA,kBACzCH,QAAQ,CAC1B,IAAII,IAAJ,GAAWC,cAAX,CAA0B,OAA1B,EAAmC;AAAEC,IAAAA,IAAI,EAAE,SAAR;AAAmBC,IAAAA,MAAM,EAAE;AAA3B,GAAnC,CAD0B,CADiC;AAAA;AAAA,MAC1DC,IAD0D;AAAA,MACpDC,OADoD;;AAK/DR,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMS,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC/BF,MAAAA,OAAO,CAAC,IAAIL,IAAJ,GAAWC,cAAX,CAA0B,OAA1B,EAAmC;AACvCC,QAAAA,IAAI,EAAE,SADiC;AAEvCC,QAAAA,MAAM,EAAE;AAF+B,OAAnC,CAAD,CAAP;AAIH,KAL2B,EAKzB,IALyB,CAA5B;AAMA,WAAO,MAAMK,aAAa,CAACF,QAAD,CAA1B;AACH,GARQ,CAAT;AAUA,sBAAO;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACH;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,GAAG,EAAC,oBAA9B;AAAmD,IAAA,GAAG,EAAC,aAAvD;AAAqE,IAAA,OAAO,EAAE,MAAMP,KAAK,CAACU,YAAN,EAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADG,eAEH;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,GAAG,EAAC,mBAA9B;AAAkD,IAAA,GAAG,EAAC,eAAtD;AAAsE,IAAA,OAAO,EAAE,MAAMV,KAAK,CAACW,CAAN,GAAU;AAC3FC,MAAAA,IAAI,EAAE,QADqF;AAE3FC,MAAAA,KAAK,EAAE;AAFoF,KAAV,CAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFG,eAMH;AAAM,IAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA0BR,IAA1B,MANG,CAAP;AAQH;;AASD,OAAO,SAASS,OAAT,CAAiBd,KAAjB,EAAsC;AAAA,mBACXH,QAAQ,CAAC,KAAD,CADG;AAAA;AAAA,MACpCkB,UADoC;AAAA,MACxBC,SADwB;;AAGzC,sBAAO;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACH;AACI,IAAA,SAAS,EAAE,mBAAmBhB,KAAK,CAACiB,WAAN,GAAoB,QAApB,GAA+B,UAAlD,CADf;AAEI,IAAA,OAAO,EAAE,MAAMjB,KAAK,CAACkB,WAAN,EAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADG,EAMFlB,KAAK,CAACmB,QANJ,eAOH;AAAK,IAAA,SAAS,EAAE,CAACJ,UAAD,GAAc,QAAd,GAAyB,eAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AACI,IAAA,KAAK,EAAC,aADV;AAEI,IAAA,SAAS,EAAC,SAFd;AAGI,IAAA,GAAG,EAAC,8EAHR;AAII,IAAA,KAAK,EAAC,iBAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAPG,eAeH,oBAAC,OAAD;AAAS,IAAA,YAAY,EAAE,MAAMC,SAAS,CAAC,CAACD,UAAF,CAAtC;AAAqD,IAAA,CAAC,EAAEf,KAAK,CAACW,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfG,CAAP;AAiBH","sourcesContent":["import React, { ReactNode, useState, useEffect } from 'react';\n\nfunction SysTray(props: { toggleWinamp: () => void, f: Function }) {\n    let [time, setTime] = useState(\n        new Date().toLocaleString(\"en-US\", { hour: \"2-digit\", minute: \"2-digit\" })\n    )\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setTime(new Date().toLocaleString(\"en-US\", {\n                hour: \"2-digit\",\n                minute: \"2-digit\"\n            }))\n        }, 1000);\n        return () => clearInterval(interval);\n    })\n\n    return <div className=\"tray\">\n        <img className=\"trayIcon\" src=\"/icons/speaker.png\" alt=\"Mini Player\" onClick={() => props.toggleWinamp()} />\n        <img className=\"trayIcon\" src=\"/icons/update.png\" alt=\"System Update\" onClick={() => props.f()({\n            type: \"launch\",\n            title: \"Critical Update Notification\"\n        })} />\n        <span className=\"clock\"> {time} </span>\n    </div>\n}\n\ninterface TaskBarProps {\n    children: ReactNode[];\n    f: Function;\n    startActive: boolean;\n    toggleStart: Function;\n}\n\nexport function TaskBar(props: TaskBarProps) {\n    let [showWinamp, setWinamp] = useState(false);\n\n    return <div className=\"TaskBar\">\n        <div\n            className={\"start button \" + (props.startActive ? \"active\" : \"inactive\")}\n            onClick={() => props.toggleStart()}>\n            ‚ùñ Start\n        </div>\n        {props.children}\n        <div className={!showWinamp ? \"winamp\" : \"winampVisible\"}>\n            <iframe\n                title=\"Mini Player\"\n                className=\"browser\"\n                src=\"https://open.spotify.com/embed/user/theslama/playlist/2xXLjFAhpmc7rSW5h2bzup\"\n                allow=\"encrypted-media\"\n            />\n        </div>\n        <SysTray toggleWinamp={() => setWinamp(!showWinamp)} f={props.f} />\n    </div >\n}\n"]},"metadata":{},"sourceType":"module"}